#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å JSONB
"""
import os

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SQLite
os.environ['DATABASE_URL'] = 'sqlite:///./test_fixed.db'

print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è JSONB...")

try:
    print("\n1Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç config...")
    from sql_app.config import settings

    print(f"‚úÖ Config: {settings.database_url}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ config: {e}")
    exit(1)

try:
    print("\n2Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç models...")
    from sql_app import models

    print("‚úÖ Models –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ models: {e}")
    exit(1)

try:
    print("\n3Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç database...")
    from sql_app.database import engine, create_tables

    print("‚úÖ Database –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ database: {e}")
    exit(1)

try:
    print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    create_tables()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
    import traceback

    traceback.print_exc()
    exit(1)

try:
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...")
    from sql_app.database import get_db_context
    from sqlalchemy import text

    with get_db_context() as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ audit_logs —Å–æ–∑–¥–∞–Ω–∞
        result = db.execute(text("SELECT name FROM sqlite_master WHERE type='table' AND name='audit_logs'")).fetchone()
        if result:
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ audit_logs —Å–æ–∑–¥–∞–Ω–∞")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            columns = db.execute(text("PRAGMA table_info(audit_logs)")).fetchall()
            print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∏ audit_logs: {[col[1] for col in columns]}")
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ audit_logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")

try:
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ audit_log...")
    from sql_app.database import get_db_context
    from sql_app.models import AuditLog

    with get_db_context() as db:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ audit_log
        test_log = AuditLog(
            entity="test",
            entity_id=1,
            action="TEST",
            data={"test_key": "test_value", "number": 123}
        )
        db.add(test_log)
        db.commit()

        # –ß–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ
        saved_log = db.query(AuditLog).filter_by(entity="test").first()
        if saved_log and saved_log.data:
            print(f"‚úÖ –¢–µ—Å—Ç JSON: {saved_log.data}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –¥–∞–Ω–Ω—ã—Ö")

except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ JSON: {e}")
    import traceback

    traceback.print_exc()

try:
    print("\n7Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç main app...")
    import main

    print(f"‚úÖ Main app: {main.app.title}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ main app: {e}")

print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å:")
print("   python switch_env.py local")
print("   uvicorn main:app --reload")