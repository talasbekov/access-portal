# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª init_test_users.py –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞:

# !/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import os
from dotenv import load_dotenv

load_dotenv()

from sql_app.database import SessionLocal, engine
from sql_app.models import Base, User, Role, Department
from sql_app.auth import get_password_hash
from sql_app import constants


def init_test_users():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""

    Base.metadata.create_all(bind=engine)
    db = SessionLocal()

    try:
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
        org = db.query(Department).filter(Department.name == "–¢–û–û –¢–µ—Å—Ç–æ–≤–∞—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è").first()
        if not org:
            org = Department(
                name="–¢–û–û –¢–µ—Å—Ç–æ–≤–∞—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
                type="COMPANY",
                parent_id=None
            )
            db.add(org)
            db.commit()
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è")

        # –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç
        dept = db.query(Department).filter(Department.name == "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ò–¢").first()
        if not dept:
            dept = Department(
                name="–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ò–¢",
                type="DEPARTMENT",
                parent_id=org.id
            )
            db.add(dept)
            db.commit()
            print("‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç")

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        division = db.query(Department).filter(Department.name == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏").first()
        if not division:
            division = Department(
                name="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                type="DIVISION",
                parent_id=dept.id
            )
            db.add(division)
            db.commit()
            print("‚úÖ –°–æ–∑–¥–∞–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

        # –û—Ç–¥–µ–ª
        unit = db.query(Department).filter(Department.name == "–û—Ç–¥–µ–ª –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏").first()
        if not unit:
            unit = Department(
                name="–û—Ç–¥–µ–ª –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                type="UNIT",
                parent_id=division.id
            )
            db.add(unit)
            db.commit()
            print("‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç–¥–µ–ª")

        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_users = [
            {
                "username": "admin",
                "full_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã",
                "email": "admin@test.kz",
                "phone": "+77001234567",
                "role_code": constants.ADMIN_ROLE_CODE,
                "department_id": org.id,
                "password": "admin123"
            },
            {
                "username": "nach_dept",
                "full_name": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
                "email": "ivanov@test.kz",
                "phone": "+77001234568",
                "role_code": constants.NACH_DEPARTAMENTA_ROLE_CODE,
                "department_id": dept.id,
                "password": "dept123"
            },
            {
                "username": "nach_upr",
                "full_name": "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á",
                "email": "petrov@test.kz",
                "phone": "+77001234569",
                "role_code": constants.NACH_UPRAVLENIYA_ROLE_CODE,
                "department_id": division.id,
                "password": "upr123"
            },
            {
                "username": "usb_user",
                "full_name": "–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤–∏—á",
                "email": "sidorov@test.kz",
                "phone": "+77001234570",
                "role_code": constants.USB_ROLE_CODE,
                "department_id": org.id,
                "password": "usb123"
            },
            {
                "username": "as_user",
                "full_name": "–ê—Å–∞–Ω–æ–≤ –ê—Å–∞–Ω –ê—Å–∞–Ω–æ–≤–∏—á",
                "email": "asanov@test.kz",
                "phone": "+77001234571",
                "role_code": constants.AS_ROLE_CODE,
                "department_id": org.id,
                "password": "as123"
            },
            {
                "username": "kpp1_user",
                "full_name": "–û—Ö—Ä–∞–Ω–Ω–∏–∫ –ö–ü–ü-1",
                "email": "kpp1@test.kz",
                "phone": "+77001234572",
                "role_code": "KPP-1",
                "department_id": org.id,
                "password": "kpp123"
            },
            {
                "username": "employee",
                "full_name": "–†–∞–±–æ—Ç–Ω–∏–∫ –û–±—ã—á–Ω—ã–π",
                "email": "employee@test.kz",
                "phone": "+77001234573",
                "role_code": constants.EMPLOYEE_ROLE_CODE,
                "department_id": unit.id,
                "password": "emp123"
            }
        ]

        for user_data in test_users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = db.query(User).filter(User.username == user_data["username"]).first()

            if not existing_user:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å
                role = db.query(Role).filter(Role.code == user_data["role_code"]).first()
                if not role:
                    print(f"‚ùå –†–æ–ª—å {user_data['role_code']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ init_roles.py")
                    continue

                # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_user = User(
                    username=user_data["username"],
                    full_name=user_data["full_name"],
                    email=user_data["email"],
                    phone=user_data["phone"],
                    hashed_password=get_password_hash(user_data["password"]),
                    role_id=role.id,
                    department_id=user_data["department_id"],
                    is_active=True
                )
                db.add(new_user)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['username']} (–ø–∞—Ä–æ–ª—å: {user_data['password']})")
            else:
                print(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        db.commit()
        print("\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:")
        print("=" * 50)
        for user in test_users:
            print(f"–õ–æ–≥–∏–Ω: {user['username']:<15} –ü–∞—Ä–æ–ª—å: {user['password']:<10} –†–æ–ª—å: {user['role_code']}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.rollback()
    finally:
        db.close()


if __name__ == "__main__":
    init_test_users()