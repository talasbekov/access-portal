# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª init_checkpoints.py –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞:

# !/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ-–ø—Ä–æ–ø—É—Å–∫–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import os
from dotenv import load_dotenv

load_dotenv()

from sql_app.database import SessionLocal, engine
from sql_app.models import Base, Checkpoint


def init_checkpoints():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ö–ü–ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""

    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    Base.metadata.create_all(bind=engine)

    db = SessionLocal()

    checkpoints_data = [
        {
            "code": "KPP-1",
            "name": "–ö–ü–ü-1 (–ì–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥)"
        },
        {
            "code": "KPP-2",
            "name": "–ö–ü–ü-2 (–°–ª—É–∂–µ–±–Ω—ã–π –≤—Ö–æ–¥)"
        },
        {
            "code": "KPP-3",
            "name": "–ö–ü–ü-3 (–ì—Ä—É–∑–æ–≤–æ–π –≤—Ö–æ–¥)"
        },
        {
            "code": "KPP-4",
            "name": "–ö–ü–ü-4 (–ó–∞–ø–∞—Å–Ω–æ–π –≤—Ö–æ–¥)"
        }
    ]

    try:
        for checkpoint_data in checkpoints_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ö–ü–ü
            existing_checkpoint = db.query(Checkpoint).filter(
                Checkpoint.code == checkpoint_data["code"]
            ).first()

            if not existing_checkpoint:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ö–ü–ü
                new_checkpoint = Checkpoint(**checkpoint_data)
                db.add(new_checkpoint)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ö–ü–ü: {checkpoint_data['name']} ({checkpoint_data['code']})")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ö–ü–ü
                existing_checkpoint.name = checkpoint_data["name"]
                print(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω –ö–ü–ü: {checkpoint_data['name']} ({checkpoint_data['code']})")

        db.commit()
        print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ö–ü–ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ö–ü–ü: {e}")
        db.rollback()
    finally:
        db.close()


if __name__ == "__main__":
    init_checkpoints()